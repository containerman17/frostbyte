name: Docker Build and Publish

on:
  push:
    branches:
      - "**" # Trigger on all branches
    tags:
      - "*" # Trigger on all tags

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          # Convert repository name to lowercase (ghcr requires lowercase)
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

          # Check if this is a tag or branch
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract tag name
            TAG=${GITHUB_REF#refs/tags/}
            echo "ref_type=tag" >> $GITHUB_OUTPUT
            echo "ref_name=$TAG" >> $GITHUB_OUTPUT

            # For tags, create both the exact tag and 'latest' if it's not a pre-release
            TAGS="${IMAGE_NAME}:${TAG}"
            # If it doesn't contain - or alpha/beta/rc, also tag as latest
            if [[ ! "$TAG" =~ - ]] && [[ ! "$TAG" =~ (alpha|beta|rc) ]]; then
              TAGS="$TAGS,${IMAGE_NAME}:latest"
            fi
          else
            # Extract branch name
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "ref_type=branch" >> $GITHUB_OUTPUT
            echo "ref_name=$BRANCH" >> $GITHUB_OUTPUT

            # Get short SHA
            SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
            echo "sha=$SHORT_SHA" >> $GITHUB_OUTPUT

            # Sanitize branch name for Docker tag (replace / with -)
            SAFE_BRANCH=$(echo $BRANCH | sed 's/\//-/g')
            echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

            # Build tags list
            TAGS="${IMAGE_NAME}:${SAFE_BRANCH}"
            if [ "$BRANCH" = "main" ]; then
              TAGS="$TAGS,${IMAGE_NAME}:latest"
              TAGS="$TAGS,${IMAGE_NAME}:${SHORT_SHA}"
            fi
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Update cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
